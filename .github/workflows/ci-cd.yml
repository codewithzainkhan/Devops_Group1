name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FLASK_APP: app.py
  FLASK_ENV: testing
  DB_HOST: localhost
  DB_NAME: hospital_db
  DB_USER: user
  DB_PASSWORD: password
  DB_PORT: 5432
  APP_HOST: 0.0.0.0
  APP_PORT: 5000

jobs:
  build-and-install:
    runs-on: ubuntu-latest
    name: "1. Build & Install"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask flake8 bandit

  lint-and-security:
    runs-on: ubuntu-latest
    name: "2. Lint & Security Scan"
    needs: build-and-install
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8 bandit safety
    
    - name: Run flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run security scan with bandit
      run: |
        bandit -r . -f html -o bandit_report.html || true
    
    - name: Run dependency security check
      run: |
        safety check --json || true

  test:
    runs-on: ubuntu-latest
    name: "3. Test with Database"
    needs: lint-and-security
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: hospital_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-flask
    
    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..10}; do
          if pg_isready -h localhost -p 5432 -U user -d hospital_db; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... attempt $i"
          sleep 5
        done
    
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_NAME: hospital_db
        DB_USER: user
        DB_PASSWORD: password
        DB_PORT: 5432
      run: |
        # Initialize database
        python -c "from package.model import init_database; print('Database initialized successfully')"
        
        # Test health endpoint
        python -c "
        from app import app
        with app.test_client() as client:
            response = client.get('/health')
            print(f'Health check status: {response.status_code}')
            print(f'Health check response: {response.get_json()}')
            assert response.status_code == 200, 'Health check failed'
        "
        
        # Test database connection
        python -c "
        from package.model import conn
        result = conn.execute('SELECT 1 as test')
        print('Database connection test passed')
        "
        
        # Run pytest if tests exist
        python -m pytest tests/ -v || echo "No tests found, continuing..."

  build-docker-image:
    runs-on: ubuntu-latest
    name: "4. Build Docker Image"
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t hospital-management-system:latest .
    
    - name: Test Docker image
      run: |
        # Test the built image
        docker run -d --name test-app -p 5000:5000 \
          -e DB_HOST=localhost \
          -e DB_NAME=test_db \
          -e DB_USER=test_user \
          -e DB_PASSWORD=test_pass \
          hospital-management-system:latest
        
        # Wait for app to start
        sleep 15
        
        # Test health endpoint
        echo "Testing Docker container health..."
        curl -f http://localhost:5000/health || (echo "Health check failed in container" && docker logs test-app && exit 1)
        
        echo "‚úÖ Docker container test passed"
        
        # Cleanup
        docker stop test-app
        docker rm test-app

  deploy:
    runs-on: ubuntu-latest
    name: "5. Deploy to Docker Hub"
    needs: build-docker-image
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/hospital-management-system:latest
          ${{ secrets.DOCKER_USERNAME }}/hospital-management-system:${{ github.sha }}
    
    - name: Verify deployment
      run: |
        echo "‚úÖ Docker image pushed successfully to Docker Hub"
        echo "üì¶ Image: ${{ secrets.DOCKER_USERNAME }}/hospital-management-system:latest"
        echo "üîó Tags: latest and ${{ github.sha }}"
        echo "üåê View at: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/hospital-management-system"