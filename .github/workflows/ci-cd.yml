name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Set default environment variables for the entire workflow
  FLASK_APP: app.py
  FLASK_ENV: testing
  DB_HOST: localhost
  DB_NAME: hospital_db
  DB_USER: user
  DB_PASSWORD: password
  DB_PORT: 5432
  APP_HOST: 0.0.0.0
  APP_PORT: 5000

jobs:
  build-and-install:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask flake8 bandit

  test-with-docker-compose:
    runs-on: ubuntu-latest
    needs: build-and-install
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create .env file for Docker Compose
      run: |
        cat > .env << EOF
        DB_HOST=db
        DB_NAME=${{ env.DB_NAME }}
        DB_USER=${{ env.DB_USER }}
        DB_PASSWORD=${{ env.DB_PASSWORD }}
        DB_PORT=${{ env.DB_PORT }}
        FLASK_ENV=${{ env.FLASK_ENV }}
        FLASK_DEBUG=False
        APP_HOST=${{ env.APP_HOST }}
        APP_PORT=${{ env.APP_PORT }}
        EOF
        echo "Created .env file:"
        cat .env
    
    - name: Build and test with Docker Compose
      run: |
        docker-compose up --build -d
        sleep 30  # Wait for services to start
        
        # Test if application is running
        curl -f http://localhost:5000/health || docker-compose logs web
        
        # Run tests
        docker-compose exec -T web python -c "from package.model import conn; print('Database connected successfully')"
        
        # Stop services
        docker-compose down

  build-docker-image:
    runs-on: ubuntu-latest
    needs: test-with-docker-compose
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t hospital-management-system:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/hospital-management-system:latest
          ${{ secrets.DOCKER_USERNAME }}/hospital-management-system:${{ github.sha }}
    
    - name: Verify deployment
      run: |
        echo "Docker image pushed successfully to Docker Hub"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/hospital-management-system:latest"

        